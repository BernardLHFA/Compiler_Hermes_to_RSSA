%{
open Data;
%}

%token <string*(int*int)> INT
%token <string*(int*int)> NAME
%token <(int*int)> PLUS MINUS TIMES DIV MOD XOR LSHIFT RSHIFT
%token <(int*int)> PLUSEQ MINUSEQ XOREQ LSHIFTEQ RSHIFTEQ
%token <(int*int)> EQ NE LT LE GE GT
%token <(int*int)> AMPERSAND BAR
%token <(int*int)> LARR RARR ASSIGN SWAP COMM COLON
%token <(int*int)> BEGIN END CALL UNCALL REVEAL HIDE
%token <(int*int)> LBRACKET RBRACKET LPAR RPAR
%token <(int*int)> P8 P16 P32 P64 S8 S16 S32 S64
%token <(int*int)> EOF
%token <(int*int)> JUNK

%start Program
%type <Data.Program> Program 
%type <Data.Block list> Blocks
%type <Data.Block> Block
%type <Data.Entry> Entry 
%type <Data.Exit> Exit
%type <Data.Arguments list> Args
%type <Data.Type> Type
%type <Data.Atom> Atom
%type <Data.Condition> Cond
%type <Data.Memory> Memory
%type <Data.Stat> Stat
%type <Data.Stat list> Stats
%type <Data.Update> Update
%type <Data.Operation> Operation
%type <Data.intType> Public Secret

%%

Program:
    Blocks EOF						{ ProgramS($1) }
;
Blocks:
    Block						{ [ $1 ] }
  | Block Blocks					{ $1 :: $2 }
;
Block:
    Entry COLON Stats COLON Exit			{ BlockS($1, $3, $5, $2) }
;
Entry:
    BEGIN NAME LPAR Args RPAR				{ BeginS($2, $4, $1) }
  | NAME LPAR Args RPAR LARR				{ UncondEntryS($1, $3, $5) }
  | NAME LPAR Args RPAR NAME LARR Cond			{ CondEntryS($7, $1, $5, $3, $6) }
;
Exit:
    END NAME LPAR Args RPAR				{ EndS($2, $4, $1) }
  | Cond RARR NAME LPAR Args RPAR NAME			{ CondExitS($1, $3, $7, $5, $2) }
  | RARR NAME LPAR Args RPAR				{ UncondExitS($2, $4, $1) }
;
Args:
    Type Atom COMM Args					{ ArgS($1, $2) :: $4 }
  | Type Atom						{ [ ArgS($1, $2) ] }
;
Type:
    Secret						{ TypeS(Secret, $1) }
  | Public						{ TypeS(Public, $1) }
;
Public:
    P8							{ u8 }
  | P16							{ u16 }
  | P32							{ u32 }
  | P64							{ u64 }
;
Secret:
    S8							{ u8 }
  | S16							{ u16 }
  | S32							{ u32 }
  | S64							{ u64 }
;
Atom:
    NAME						{ VarS $1 }
  | INT							{ CstS $1 }
;
Cond:
    Atom EQ Atom					{ BoolOp2S("==", $1, $3, $2) }
  | Atom NE Atom					{ BoolOp2S("!=", $1, $3, $2) }
  | Atom LT Atom					{ BoolOp2S("<", $1, $3, $2) }
  | Atom LE Atom					{ BoolOp2S("<=", $1, $3, $2) }
  | Atom GT Atom					{ BoolOp2S(">", $1, $3, $2) }
  | Atom GE Atom					{ BoolOp2S(">=", $1, $3, $2) }
;
Memory:
    Type LBRACKET Atom RBRACKET				{ MemoryS($1, $3, $2) }
;
Stat:
    Type Atom ASSIGN Atom				{ Assign2S($1, $2, $4, $3) }
  | Type Atom ASSIGN Update				{ AssignS($1, $2, $4, $3) }
  | Type NAME COMM Type NAME ASSIGN NAME COMM NAME	{ DAssignS($1, VarS $2, $4, VarS $5, VarS $7, VarS $9, $6) }
  | Memory PLUSEQ Operation				{ MemOp2S("+=", $1, $3, $2) }
  | Memory MINUSEQ Operation				{ MemOp2S("-=", $1, $3, $2) }
  | Memory XOREQ Operation				{ MemOp2S("^=", $1, $3, $2) }
  | Memory LSHIFTEQ Operation				{ MemOp2S("<<=", $1, $3, $2) }
  | Memory RSHIFTEQ Operation				{ MemOp2S(">>=", $1, $3, $2) }
  | Memory SWAP Memory					{ MemSwapS($1, $3, $2) }
  | Atom ASSIGN Memory ASSIGN Atom			{ SwapS($1, $3, $5, $2) }
  | LPAR Args RPAR ASSIGN CALL NAME LPAR Args RPAR	{ AssignArgS($2, CallS(VarS $6, $8, $5), $4) }
  | LPAR Args RPAR ASSIGN UNCALL NAME LPAR Args RPAR	{ AssignArgS($2, UncallS(VarS $6, $8, $5), $4) }
  | Public COLON NAME ASSIGN REVEAL Secret NAME		{ TAssignS(TypeS(Public, $1), VarS $3, RevealS(TypeS (Secret, $6), VarS $7, $5), $4) }
  | Secret COLON NAME ASSIGN HIDE Public NAME		{ TAssignS(TypeS(Secret, $1), VarS $3, HideS(TypeS (Public, $6), VarS $7, $5), $4) }
;
Stats:
    Stat						{ [ $1 ] }
  | Stat Stats						{ $1 :: $2 } 
;
Update:
    Atom PLUS Operation					{ UpdOp2S("+", $1, $3, $2) }
  | Atom MINUS Operation				{ UpdOp2S("-", $1, $3, $2) }
  | Atom XOR Operation					{ UpdOp2S("^", $1, $3, $2) }
  | Atom LSHIFT Operation				{ UpdOp2S("<<", $1, $3, $2) }
  | Atom RSHIFT Operation				{ UpdOp2S(">>", $1, $3, $2) }
;
Operation:
    Atom						{ SimOp2S($1) }
  | LPAR Atom PLUS Atom RPAR				{ Op2S("+", $2, $4, $3) }
  | LPAR Atom MINUS Atom RPAR				{ Op2S("-", $2, $4, $3) }
  | LPAR Atom XOR Atom RPAR				{ Op2S("^", $2, $4, $3) }
  | LPAR Atom LSHIFT Atom RPAR				{ Op2S("<<", $2, $4, $3) }
  | LPAR Atom RSHIFT Atom RPAR				{ Op2S(">>", $2, $4, $3) }
  | LPAR Atom TIMES Atom RPAR				{ Op2S("*", $2, $4, $3) }
  | LPAR Atom DIV Atom RPAR				{ Op2S("div", $2, $4, $3) }
  | LPAR Atom MOD Atom RPAR				{ Op2S("mod", $2, $4, $3) }
  | LPAR Atom AMPERSAND Atom RPAR			{ Op2S("&", $2, $4, $3) }
  | LPAR Atom BAR Atom RPAR				{ Op2S("|", $2, $4, $3) }
;
